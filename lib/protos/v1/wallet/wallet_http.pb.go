// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.2
// source: lib/protos/v1/wallet/wallet.proto

package wallet

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWalletServiceGetUserBalance = "/e_wallet_microservices_v2.WalletService/GetUserBalance"
const OperationWalletServiceUpdateUserBalance = "/e_wallet_microservices_v2.WalletService/UpdateUserBalance"

type WalletServiceHTTPServer interface {
	// GetUserBalance GetUserBalance retrieves the current balance for a user.
	GetUserBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// UpdateUserBalance UpdateUserBalance handles deposits, withdrawals, or other balance adjustments.
	UpdateUserBalance(context.Context, *UpdateBalanceRequest) (*UpdateBalanceResponse, error)
}

func RegisterWalletServiceHTTPServer(s *http.Server, srv WalletServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/wallet/balance", _WalletService_GetUserBalance0_HTTP_Handler(srv))
	r.POST("/v1/wallet/update", _WalletService_UpdateUserBalance0_HTTP_Handler(srv))
}

func _WalletService_GetUserBalance0_HTTP_Handler(srv WalletServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletServiceGetUserBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBalance(ctx, req.(*GetBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBalanceResponse)
		return ctx.Result(200, reply)
	}
}

func _WalletService_UpdateUserBalance0_HTTP_Handler(srv WalletServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBalanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletServiceUpdateUserBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserBalance(ctx, req.(*UpdateBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBalanceResponse)
		return ctx.Result(200, reply)
	}
}

type WalletServiceHTTPClient interface {
	GetUserBalance(ctx context.Context, req *GetBalanceRequest, opts ...http.CallOption) (rsp *GetBalanceResponse, err error)
	UpdateUserBalance(ctx context.Context, req *UpdateBalanceRequest, opts ...http.CallOption) (rsp *UpdateBalanceResponse, err error)
}

type WalletServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewWalletServiceHTTPClient(client *http.Client) WalletServiceHTTPClient {
	return &WalletServiceHTTPClientImpl{client}
}

func (c *WalletServiceHTTPClientImpl) GetUserBalance(ctx context.Context, in *GetBalanceRequest, opts ...http.CallOption) (*GetBalanceResponse, error) {
	var out GetBalanceResponse
	pattern := "/v1/wallet/balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWalletServiceGetUserBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletServiceHTTPClientImpl) UpdateUserBalance(ctx context.Context, in *UpdateBalanceRequest, opts ...http.CallOption) (*UpdateBalanceResponse, error) {
	var out UpdateBalanceResponse
	pattern := "/v1/wallet/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletServiceUpdateUserBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
